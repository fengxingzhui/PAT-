1024 科学计数法 （20 分）
科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 [+-][1-9].[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。

现以科学计数法的格式给出实数 A，请编写程序按普通数字表示法输出 A，并保证所有有效位都被保留。

输入格式：
每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 A。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。

输出格式：
对每个测试用例，在一行中按普通数字表示法输出 A，并保证所有有效位都被保留，包括末尾的 0。

输入样例 1：
+1.23400E-03
输出样例 1：
0.00123400
输入样例 2：
-1.2E+10
输出样例 2：
-12000000000


注意：题目比想象中简单，因为输入不会出现0.000X这种情况，但是下面的代码里考虑了这种情况。经测试，删除这种情况后也是对的。
坑点：abs（）还是要用cstdlib里面的，用<cmath>里的本地通过但是oj判断会出错。C++11标准的说法是cmath里的abs（）是用于浮点型的绝对值。
参考http://www.cplusplus.com/reference/cstdlib/abs/

#include<cstdio>
#include<cstring>
#include<cstdlib>
using namespace std;
int main()
{
	char tmp[100100]={};
	int a,c;
	char b[100100]={};
	scanf("%s",&tmp );
	sscanf(tmp,"%d.%[^E]E%d",&a,&b,&c);
	char str[100100]={};
	sprintf(str,"%d%s",abs(a),b);
	//printf("%s",str);
	if(tmp[0]=='-') 
	{
		printf("-");
		a=-a;
	}
	if(c<0)
	{
		printf("0.");
		for(int i=1;i<abs(c);i++) printf("0");
		printf("%s",str);
	}
	else
	{
		int length = strlen(str)>abs(c)+1?strlen(str):abs(c)+1;
		int flag=0;
		for(int i=0;i<length;i++)
		{
			if(!flag&&str[i]!='0') flag=1;
			else if(!flag&&i==abs(c))
			{
				printf("0.");
				flag = 1;
				continue;
			}
			if(flag)
			{
				if(i<strlen(str)) printf("%c",str[i]);
				else printf("0");
				if(i==abs(c)&&i<length-1) printf(".");
			}
		}
	}
}