1050 螺旋矩阵 （25 分）
本题要求将给定的 N 个正整数按非递增的顺序，填入“螺旋矩阵”。所谓“螺旋矩阵”，是指从左上角第 1 个格子开始，按顺时针螺旋方向填充。要求矩阵的规模为 m 行 n 列，满足条件：m×n 等于 N；m≥n；且 m−n 取所有可能值中的最小值。

输入格式：
输入在第 1 行中给出一个正整数 N，第 2 行给出 N 个待填充的正整数。所有数字不超过 10
​4
​​ ，相邻数字以空格分隔。

输出格式：
输出螺旋矩阵。每行 n 个数字，共 m 行。相邻数字以 1 个空格分隔，行末不得有多余空格。

输入样例：
12
37 76 20 98 76 42 53 95 60 81 58 93
输出样例：
98 95 93
42 37 81
53 20 76
58 60 76

注意：这种类型的题目挺恶心，也说不清到底坑点在哪，肯定还有更好的写法


#include<cstdio>
#include<cmath>
#include<algorithm>
using namespace std;
bool cmp(int a,int b)
{
	return a>=b;
}
int main()
{
	int N,m,n;
	scanf("%d",&N);
	for(n=int(sqrt(N));n>=1;n--)
	{
		if(N%n==0) break;
	}
	m=N/n;
	int num[N]={},a[m][n]={};
	for(int i=0;i<N;i++) scanf("%d",&num[i]);
	sort(num,num+N,cmp);
	int dir=0,row=0,col=0,width=n-1,height=m-1;
	int cnt=0;
	for(int i=0;i<N;i++)
	{
		switch(dir)
		{
			case 0:	if(!width) 
					{
						i--;
						dir++;	
					}
					else
					{
						a[row][col++]=num[i];
						cnt++;
						if(cnt==width) 
						{
							dir++;
							cnt=0;
						}
					}

					break;
			case 1: 
					a[row++][col]=num[i];
					cnt++;
					if(cnt==height) 
					{
						dir++;
						cnt=0;
					}	
					break;
			case 2: if(!width) 
					{
						i--;
						dir++;	
					}
					else
					{
						a[row][col--]=num[i];
						cnt++;
						if(cnt==width)
						{
							dir++;
							cnt=0;
						}
					}
					break;
			case 3: 
					a[row--][col]=num[i];
					cnt++;
					if(cnt==height)
					{
						dir=0;
						cnt=0;
						height-=2;
						width-=2;
						col++;
						row++;
					}
					break;
					
		}
	}
//	printf("%d %d\n",width,height);
	for(int i=0;i<m;i++)
	{
		for(int j=0;j<n;j++)
		{
			if(j) printf(" ");
			printf("%d",a[i][j]);
		}
			
		printf("\n");
	}
		
}