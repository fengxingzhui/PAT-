1095 解码PAT准考证 （25 分）
PAT 准考证号由 4 部分组成：

第 1 位是级别，即 T 代表顶级；A 代表甲级；B 代表乙级；
第 2~4 位是考场编号，范围从 101 到 999；
第 5~10 位是考试日期，格式为年、月、日顺次各占 2 位；
最后 11~13 位是考生编号，范围从 000 到 999。
现给定一系列考生的准考证号和他们的成绩，请你按照要求输出各种统计信息。

输入格式：
输入首先在一行中给出两个正整数 N（≤10^4）和 M（≤100），分别为考生人数和统计要求的个数。

接下来 N 行，每行给出一个考生的准考证号和其分数（在区间 [0,100] 内的整数），其间以空格分隔。

考生信息之后，再给出 M 行，每行给出一个统计要求，格式为：类型 指令，其中

类型 为 1 表示要求按分数非升序输出某个指定级别的考生的成绩，对应的 指令 则给出代表指定级别的字母；
类型 为 2 表示要求将某指定考场的考生人数和总分统计输出，对应的 指令 则给出指定考场的编号；
类型 为 3 表示要求将某指定日期的考生人数分考场统计输出，对应的 指令 则给出指定日期，格式与准考证上日期相同。
输出格式：
对每项统计要求，首先在一行中输出 Case #: 要求，其中 # 是该项要求的编号，从 1 开始；要求 即复制输入给出的要求。随后输出相应的统计结果：

类型 为 1 的指令，输出格式与输入的考生信息格式相同，即 准考证号 成绩。对于分数并列的考生，按其准考证号的字典序递增输出（题目保证无重复准考证号）；
类型 为 2 的指令，按 人数 总分 的格式输出；
类型 为 3 的指令，输出按人数非递增顺序，格式为 考场编号 总人数。若人数并列则按考场编号递增顺序输出。
如果查询结果为空，则输出 NA。

输入样例：
8 4
B123180908127 99
B102180908003 86
A112180318002 98
T107150310127 62
A107180908108 100
T123180908010 78
B112160918035 88
A107180908021 98
1 A
2 107
3 180908
2 999
输出样例：
Case 1: 1 A
A107180908108 100
A107180908021 98
A112180318002 98
Case 2: 2 107
3 260
Case 3: 3 180908
107 2
123 2
102 1
Case 4: 2 999
NA


注意：二刷的时候居然没用到unordered_map，哈哈哈

#include<iostream>
#include<algorithm>
#include<unordered_map>
using namespace std;
struct student
{
	string id;
	int grade;
};
struct kaochang
{
	int renshu;
	int kc_num;
};
bool cmp1(student a,student b)
{
	if(a.grade!=b.grade)
		return a.grade >b.grade ;
	else
		return a.id <b.id ;
}
bool cmp2(kaochang a,kaochang b)
{
	if(a.renshu!=b.renshu)
		return a.renshu>b.renshu;
	else 
		return a.kc_num<b.kc_num;
}
int main()
{
	int N,M;
	scanf("%d %d",&N,&M);
	student a[N];
	for(int i=0;i<N;i++)
	{
		student tmp;
		cin>>tmp.id>>tmp.grade;
		a[i]=tmp;
	}
	for(int i=0;i<M;i++)
	{
		int act,flag=0;
		string data;
		cin>>act>>data;
		printf("Case %d: %d %s\n",i+1,act,data.c_str());
		if(act==1)
		{
			sort(a,a+N,cmp1);
			for(int i=0;i<N;i++)
			{
				if(a[i].id[0]==data[0])
				{
					printf("%s %d\n",a[i].id.c_str(), a[i].grade);
					flag=1;
				}
					
			}
		}
		else if(act==2)
		{
			int sum=0,cnt=0;
			for(int i=0;i<N;i++)
			{
				string kaochang=a[i].id.substr(1,3);
				if(data==kaochang)
				{
					cnt++;
					sum+=a[i].grade ;
					flag=1;
				}
					
			}
			if(flag) printf("%d %d\n",cnt,sum);
		}
		else if(act==3)
		{
			kaochang b[1000];
			for(int i=0;i<1000;i++)
			{
				b[i].kc_num = i;
				b[i].renshu=0;
			}
			for(int i=0;i<N;i++)
			{
				string riqi=a[i].id.substr(4,6);
				string kaochang=a[i].id.substr(1,3);
				int kc_num=(kaochang[0]-'0')*100+(kaochang[1]-'0')*10+kaochang[2]-'0';
				if(riqi==data)  
				{
					b[kc_num].renshu++;
					flag=1;
				} 
			}
			sort(b,b+1000,cmp2);
			if(flag)
				for(int i=0;i<1000;i++)
				{
					if(!b[i].renshu ) break;
					printf("%d %d\n",b[i].kc_num ,b[i].renshu );
				}
		}
		if(!flag) printf("NA\n");
	}
}