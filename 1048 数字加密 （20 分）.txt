1048 数字加密 （20 分）
本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。

输入格式：
输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。

输出格式：
在一行中输出加密后的结果。

输入样例：
1234567 368782971
输出样例：
3695Q8118

注意：玄学捉bug	。。。
	  这道题有个隐藏条件是A和B较短的那个前面要补0
	  而且一定要用补0才能ac，我试过用条件分支判断，结果最后一个点出错了...至今不知道错在哪
	  
#include<cstdio>
#include<cstring>
using namespace std;
int main()
{
	char A[101]={},B[101]={},C[101]={};
	scanf("%s %s",&A,&B);
	int i=strlen(A)-1,j=strlen(B)-1;
	int flag=1;
	int length=strlen(A)>strlen(B)?strlen(A):strlen(B);
	C[length--]='\0';
	char tmp_a,tmp_b;
	while(length>=0)
	{
		tmp_a = i>=0?A[i--]:'0';
		tmp_b = j>=0?B[j--]:'0';
		int tmp;
		if(flag%2==1)
		{
			tmp=(tmp_a-'0'+tmp_b-'0')%13;
			if(tmp<10) C[length--]= tmp+'0';
			else if(tmp==10) C[length--]='J';
			else if(tmp==11) C[length--]='Q';
			else C[length--]='K';
		}
		else
		{
			tmp=tmp_b-tmp_a;
			if(tmp<0) tmp+=10;
			C[length--]=tmp+'0';
		}	
		flag++;
	}
	printf("%s\n",C);
}