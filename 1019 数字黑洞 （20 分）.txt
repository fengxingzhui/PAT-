1019 数字黑洞 （20 分）
给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 6174，这个神奇的数字也叫 Kaprekar 常数。

例如，我们从6767开始，将得到

7766 - 6677 = 1089
9810 - 0189 = 9621
9621 - 1269 = 8352
8532 - 2358 = 6174
7641 - 1467 = 6174
... ...
现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。

输入格式：
输入给出一个 (0,10^4) 区间内的正整数 N。

输出格式：
如果 N 的 4 位数字全相等，则在一行内输出 N - N = 0000；否则将计算的每一步在一行内输出，直到 6174 作为差出现，输出格式见样例。注意每个数字按 4 位数格式输出。

输入样例 1：
6767
输出样例 1：
7766 - 6677 = 1089
9810 - 0189 = 9621
9621 - 1269 = 8352
8532 - 2358 = 6174
输入样例 2：
2222
输出样例 2：
2222 - 2222 = 0000

坑点：注意如果输入的数可能已经是6174了
      另外sscanf（）和sprintf（）在这道题貌似会超时，老老实实用数组吧

#include<cstdio>
#include<algorithm>
using namespace std;
bool cmp(int a,int b)
{
	return a>b;
}
int main()
{
	int N;
	scanf("%d",&N);
	while(N!=0)
	{
		int num[4]={};
		num[0]=N/1000;
		num[1]=N%1000/100;
		num[2]=N%100/10;
		num[3]=N%10;
		int tmp1,tmp2;
		sort(num,num+4,cmp);
		tmp1=num[0]*1000+num[1]*100+num[2]*10+num[3];
		tmp2=num[3]*1000+num[2]*100+num[1]*10+num[0];
		N=tmp1-tmp2;
		printf("%04d - %04d = %04d\n",tmp1,tmp2,N);
		if(N==6174) break;
	}
}